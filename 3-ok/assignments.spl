Int globalA = 0;
[Int] gIntList = 5 : 6 : 7 : 8 : [];

/* in-place update of list elements */
incList(list) :: [Int] -> Void
{
    while(!isEmpty(list))
    {
        list.hd = list.hd + 1;
        list = list.tl;
    }
}

/* in-place update of tuples */
incNegTuple(t) :: (Int, Bool) -> Void
{
    t.fst = t.fst + 1;
    t.snd = !t.snd;
}

incNegTuple2(t) :: (Int, Int) -> Int
{
    t.fst = t.fst + 1;
    t.snd = -t.snd;
    return 0;
}

printIntList(list) :: [Int] -> Void
{
    while(!isEmpty(list))
    {
        print(list.hd);
        list = list.tl;
    }
}

f(paramA) :: Int -> Void
{
    print(paramA);
    paramA = 1;
    print(paramA);
    paramA = paramA + 1;
    print(paramA);
}

main()::->Void
{
    Int localA = 0;
    [Int] lIntList = 1 : 2 : 3 : [];
    (Int, Bool) lTuple1 = (5, True);
    (Int, Int) lTuple2 = (5, 7);

    print(globalA);
    globalA = 1;
    print(globalA);
    globalA = globalA + 1;
    print(globalA);

    print(localA);
    localA = 1;
    print(localA);
    localA = localA + 1;
    print(localA);

    f(0);

    incList(lIntList);
    printIntList(lIntList);
    incList(gIntList);
    printIntList(gIntList);

    incNegTuple(lTuple);
    print(lTuple.fst);
    print(lTuple.snd);

    incNegTuple2(lTuple2);
    print(lTuple2.fst);
    print(lTuple2.snd);
}
